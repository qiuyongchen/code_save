#ifndef CHESSSTATE_H
#define CHESSSTATE_H

#include <list>
#include <vector>
#include <set>
#include "ChessMan.h"

#define SIZE 9
#define random(x) (rand()%x)

/*
棋盘的状态，包括
整个棋盘的评估值（评估值为0表示已经达到最优，各皇后的位置都正确），
棋盘的大小，
各个棋子是如何分布的，各个皇后在哪里，
从这个棋盘状态出发，移动一个皇后之后的棋盘状态的集合。

*/
class CHESS_STATE
{
public:
	double ddd = 0.001;

	int evalution; // 整个棋盘的评估值
	int size; // 棋盘的大小
	std::vector<int> chessMans; // 各个棋子的分布情况
	std::vector<CHESS_STATE> nextStates; // 移动一个皇后之后的棋盘状态的集合

	CHESS_STATE();

	CHESS_STATE(const CHESS_STATE & s);

	CHESS_STATE(std::vector<int> chessMans_);

	~CHESS_STATE();

	// 求整个棋盘的评估值
	int getEvalution();

	bool calculateLinearConflict(int ai, int aj, int bi, int bj, int aGoalI, int aGoalJ, int bGoalI, int bGoalJ);

	bool isTheSame(double a, double b);

	int calculateManhattanDistance(int ai, int aj, int bi, int bj);

	// 求移动一个皇后之后的棋盘状态的集合
	std::vector<CHESS_STATE> getNextStates();

	int getNextStatesSize();

	// 随机移动一个皇后后的棋盘状态
	CHESS_STATE getRandomState();

	int getSize();

	void setSize(int size_);

private:

};


#endif